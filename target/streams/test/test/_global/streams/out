[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(CheckoutSpec, org.scalatest.tools.Framework$$anon$1@270e5a51, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(DateFormatterSpec, org.scalatest.tools.Framework$$anon$1@270e5a51, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCheckoutSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCheckout Service[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should get correct price for a single apple[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should get correct price for a single Orange[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return nothing for unrecognised items[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should get correct totals for one item of each[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Apply the Deal for apple[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Apply the Deal for Oranges[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Apply the Deal for apples, but full price for 3rd[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Apply the Deal for apples, but full price for 4th[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mDateFormatterSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mDate Formatter[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return expected output when only valid response[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return expected output when multiple segments can refer to different time attributes[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return expected output when every number is the same[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return invalid response when dates are invalid[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32myearFormatter[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should add 2000 if the year contains two digits[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should not add if the year already has four digits[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mfillMaybeLists[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should create the correct Potential date from 10/10/10[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should create the correct Potential date from 31/12/2001[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should create the correct Potential date invalid data -1/-1/-1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 413 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 17[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 2, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 17, failed 0, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAll tests passed.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mPassed tests:[0m
[0m[[0m[0mdebug[0m] [0m[0m	CheckoutSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	DateFormatterSpec[0m
